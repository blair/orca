Index: SourceFile.pm
===================================================================
--- SourceFile.pm	(revision 362)
+++ SourceFile.pm	(working copy)
@@ -31,6 +31,10 @@
 use Orca::Utils         qw(email_message);
 use vars                qw(@ISA $VERSION);
 
+# Andy Fox - 2nd July 2002
+# We need this to convert time into Unix Epoch Time.
+use Time::Local;
+
 @ISA     = qw(Orca::DataFile);
 $VERSION = substr q$Revision: 0.01 $, 10;
 
@@ -153,9 +157,39 @@
       return unless $fd;
       my $line = <$fd>;
       chomp($line);
+
+      # Andy Fox - 2nd July 2002
+      # Take the first line (headers) and convert it into a format Orca can understand
+
       if ($line) {
         $self->[I_FIRST_LINE] = 1;
-        @column_description = split(' ', $line);
+        $_ = $line;
+        s/ /_/g;
+        s/\\\\[^\\ ]+\\//g;
+        s/"//g;
+        s/\\/_/g;
+        s/\?//g;
+        s/\(/_/g;
+        s/\)/_/g;
+        s/,//g;
+        s/://g;
+        s/\?//g;
+        s/__/_/g;
+        s/__/_/g;
+
+        $line = $_;
+        print "$line\n";
+
+        # Andy Fox - 2nd July 2002
+        # Changed this to a tab (was a space), so it can read tsv format files
+
+        @column_description = split('	', $line);
+
+        # Andy Fox - 2nd July 2002
+        # Set the first field of the first line 'timestamp'
+
+        $column_description[0]="timestamp";
+
       } else {
         warn "$0: warning: no first_line for '$filename' yet.\n";
         $open_file_cache->close($fid) or
@@ -921,8 +955,19 @@
     # in the output file when it starts up.
     next if $line =~ /timestamp/;
 
-    my @line = split(' ', $line);
+print "$line\n";
+$_ = $line;
+s/ /:/g;
+s/"//g;
+$line = $_;
 
+    # Andy Fox - 2nd July 2002
+    # Changed this to a tab (was a space), so it can read tsv format files
+    my @line = split('	', $line);
+
+    ##ANDY##
+    #print "@line\n";
+
     # Skip this input line if 1) the file uses the first line to
     # define the column names, 2) the number of columns loaded is not
     # equal to the number of columns in the column description.
@@ -940,6 +985,58 @@
     } else {
       $time = $line[$date_column_index];
     }
+#ANDY#
+#print "$time\n";
+
+# At this stage the date is in this format: 06/18/2002 21:56:06.096
+
+$_ = $time;
+s/\//:/g;
+#print "$_\n";
+#s/ /:/;
+#print "$_\n";
+s/\./:/;
+#print "$_\n";
+#$newtime = $_;
+#s/"//g;
+#print "$_\n";
+
+# Now we have this: "06:18:2002:21:56:06:096"
+
+my @andy = split(':', $_);
+
+my ($sec);
+my ($min);
+my ($hr);
+my ($day);
+my ($mon);
+my ($yr);
+
+$mon = $andy[0];
+$day = $andy[1];
+$yr = $andy[2];
+$hr = $andy[3];
+$min = $andy[4];
+$sec = $andy[5];
+
+#print "mon = $mon\n";
+#print "day = $day\n";
+#print "yr = $yr\n";
+#print "hr = $hr\n";
+#print "min = $min\n";
+#print "sec = $sec\n";
+
+$mon -= 1;
+$yr -= 1900;
+#print "yr = $yr\n";
+
+my ($blur);
+$blur = timelocal($sec, $min, $hr, $day, $mon, $yr);
+#print "time is now $blur\n";
+
+$time = $blur;
+print "$time\n";
+
     $last_data_time = $time if $time > $last_data_time;
 
     # If the file status from the source data file is greater than
