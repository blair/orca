.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH RRDTOOL 1 "19990426.22" "12/Feb/99" "rrdtool"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
rrdtool \- round robin database tool
.SH "SYNOPSIS"
\fBrrdtool\fR \fB\-\fR | \fIfunction\fR
.SH "DESCRIPTION"
.Sh "\s-1OVERVIEW\s0"
It is pretty easy to gather status information from all sorts of
things, ranging from the temperature in your office to the number of
octets which have passed through the \s-1FDDI\s0 interface of your
router. But it is not so trivial to store this data in a efficient and
systematic manner. This is where \fBrrdtool\fR kicks in. It lets you
\fIlog and analyze\fR the data you gather from all kinds of data-sources
(\fB\s-1DS\s0\fR). The data analysis part of rrdtool is based on the ability to
quickly generate graphical representations of the data values
collected over a definable time period.
.PP
In this man page you will find general information on the design and
functionality of the Round Robin Database Tool (rrdtool). For a more
detailed description of how to use the individual functions of the
\fBrrdtool\fR check the corresponding man page.
.Sh "\s-1FUNCTIONS\s0"
While the man pages talk of command line switches you have to set in order to
make \fBrrdtool\fR work it is important to note that the \fBrrdtool\fR can be
\&'remote controlled\*(R' through a set of pipes. This saves a considerable
amount of startup time when you plan to make \fBrrdtool\fR do a lot of
things quickly. Check the section on the section on \fIRemote Control\fR further down.
.Ip "\fBcreate\fR" 8
Set up a new Round Robin Database (\s-1RRD\s0). Check rrdcreate
.Ip "\fBupdate\fR" 8
Store new data values into an \s-1RRD\s0. Check rrdupdate
.Ip "\fBgraph\fR" 8
Create a graph from data stored in one or several \s-1RRD\s0. Apart from
generating graphs, data can also be extracted to stdout. Check rrdgraph
.Ip "\fBdump\fR" 8
Dump the contents of an \s-1RRD\s0 in plain \s-1ASCII\s0. This is manly used for
debugging. Check rrddump
.Ip "\fBfetch\fR" 8
Get data for a certain time period from a \s-1RRD\s0. The graph function
uses fetch to retrieve its data from an rrd. Check rrdfetch
.Ip "\fBtune\fR" 8
Alter setup of an \s-1RRD\s0
.Ip "\fBlast\fR" 8
Find last update time of an \s-1RRD\s0
.Sh "\s-1HOW\s0 \s-1DOES\s0 \s-1RRDTOOL\s0 \s-1WORK\s0?"
.Ip "Data acquisition" 8
When monitoring the state of a system, it is convenient to have the
data available at a constant interval. Unfortunately you may not
always be able to fetch data at exactly the time you want
to. Therefore \fBrrdtool\fR lets you update the logfile at any time you
want. It will automatically interpolate the value of the data-source
(\fB\s-1DS\s0\fR) at the latest official time-slot and write this value to the
log. The value you have supplied is stored as well and is also taken
into account when interpolating the next log entry.
.Ip "Consolidation" 8
You may log data at a 1 minute interval, but you are also be
interested to know the development of the data over the last year. You
could do this by simply storing the data in 1 minute interval, for one
year. While this would take considerable disk space it would also take
a lot of time to analyze the data when you wanted to create a graph
covering the whole year. \fBrrdtool\fR offers a solution to this of this
problem through its data consolidation feature. When setting up
an Round Robin Database (\fB\s-1RRD\s0\fR), you can define at which interval
this consolidation should occur, and what consolidation function
(\fB\s-1CF\s0\fR) (average, minimum, maximum, total, last) should be used to
build the consolidated values (see rrdcreate). You can define any
number of different consolidation setups within one \fB\s-1RRD\s0\fR. They will
all be maintained on the fly when new data is loaded into the \fB\s-1RRD\s0\fR.
.Ip "Round Robin Archives" 8
Data values of the same consolidation setup are stored into Round
Robin Archives (\fB\s-1RRA\s0\fR). This is a very efficient manner to store data
for a certain amount of time, while using a known amount of storage
space. 
.Sp
It works like this: If you want to store 1000 values in 5 minute
interval, \fBrrdtool\fR will allocate space for 1000 data values and a
header area. In the header it will store a pointer telling
which one of the values in the storage area was last written to. New
values are written to the Round Robin Archive in a ...  you guess it
\&... round robin manner. This automatically limits the history to the last
1000 values. Because you can define several \fB\s-1RRA\s0\fRs within a single \fB\s-1RRD\s0\fR,
you can setup another one, storing 750 data values at a 2 hour interval
and thus keeping a log for the last two months although at a lower
resolution.
.Sp
The use of \fB\s-1RRA\s0\fRs guarantees that the \fB\s-1RRD\s0\fR does not grow over
time and that old data is automatically eliminated. By using the
consolidation feature, you can still keep data for a very long time,
while gradually reducing the resolution of the data along the time
axis. Using different consolidation functions (\fB\s-1CF\s0\fR) allows you to
store exactly the type of information that actually interests
you. (Maximum one minute traffic on the \s-1LAN\s0, minimum temperature of
the wine cellar, total minutes down time ...)
.Ip "Unknown Data" 8
As mentioned earlier, the \fB\s-1RRD\s0\fR stores data at a constant
interval. Now it may happen that no new data is available when a
value has to be written to the \fB\s-1RRD\s0\fR. Data acquisition may not be
possible for one reason or an other. The \fBrrdtool\fR handles these
situations by storing an \fI*\s-1UNKNOWN\s0*\fR value into the database. The
value \*(L'\fI*\s-1UNKNOWN\s0*\fR\*(R' is supported through all the functions of the
database. When consolidating the amount of \fI*\s-1UNKNOWN\s0*\fR data is
accumulated and when a new consolidated value is ready to be written
to its Round Robin Archive (\fB\s-1RRA\s0\fR) a validity check is performed to
make sure that the percentage of unknown data in the new value is
below a configurable level. If so, an \fI*\s-1UNKNOWN\s0*\fR value will be
written to the \fB\s-1RRA\s0\fR.
.Ip "Graphing" 8
The \fBrrdtool\fR also allows one to generate reports in numerical and
graphical form based on the data stored in one or several
\fB\s-1RRD\s0\fRs. The graphing feature is fully configurable. Size, color and
contents of the graph can be defined freely. Check rrdgraph
for more information on this.
.Sh "\s-1REMOTE\s0 \s-1CONTROL\s0"
When you start \fBrrdtool\fR with the command line option \*(L'\fB\-\fR\*(R', it waits
for input via standard in. With this feature you can improve
performance by attaching \fBrrdtool\fR to another process (mrtg is one
example) through a set of pipes. Over the pipes \fBrrdtool\fR accepts the
same arguments as on the command line. When a command is completed, 
rrdtool will print the string  \*(L'\f(CWOK\fR\*(R', followed by timing information of
the form \fBu:\fR\fIusertime\fR \fBs:\fR\fIsystemtime\fR both values are running
totals of seconds since rrdtool was started. If an error occurs, a line 
of the form \*(L'\f(CWERROR:\fR \fIDescription of error\fR\*(R' will be printed. \fBrrdtool\fR
will not abort if possible, but follow the \s-1ERROR\s0 line with an \s-1OK\s0 line.
.SH "SEE ALSO"
rrdcreate, rrdupdate, rrdgraph, rrddump, rrdfetch, rrdtune, rrdlast
.SH "BUGS"
There must be plenty ... this is alpha code ;\-) ...
.SH "AUTHOR"
Tobias Oetiker <oetiker@ee.ethz.ch>

.rn }` ''
.IX Title "RRDTOOL 1"
.IX Name "rrdtool - round robin database tool"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Subsection "\s-1OVERVIEW\s0"

.IX Subsection "\s-1FUNCTIONS\s0"

.IX Item "\fBcreate\fR"

.IX Item "\fBupdate\fR"

.IX Item "\fBgraph\fR"

.IX Item "\fBdump\fR"

.IX Item "\fBfetch\fR"

.IX Item "\fBtune\fR"

.IX Item "\fBlast\fR"

.IX Subsection "\s-1HOW\s0 \s-1DOES\s0 \s-1RRDTOOL\s0 \s-1WORK\s0?"

.IX Item "Data acquisition"

.IX Item "Consolidation"

.IX Item "Round Robin Archives"

.IX Item "Unknown Data"

.IX Item "Graphing"

.IX Subsection "\s-1REMOTE\s0 \s-1CONTROL\s0"

.IX Header "SEE ALSO"

.IX Header "BUGS"

.IX Header "AUTHOR"

