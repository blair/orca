RRDFETCH(1)                  RRDtool                  RRDFETCH(1)



NNAAMMEE
       rrdfetch - fetch data from an RRD.

SSYYNNOOPPSSIISS
       rrrrddttooooll ffeettcchh _f_i_l_e_n_a_m_e _C_F [----rreessoolluuttiioonn|--rr _r_e_s_o_l_u_t_i_o_n]
       [----ssttaarrtt|--ss _s_t_a_r_t] [----eenndd|--ee _e_n_d]

DDEESSCCRRIIPPTTIIOONN
       The ffeettcchh function is normally used internally by the
       graph function, to get data from RRRRDDs. ffeettcchh will analyze
       the RRRRDD and will try to retrieve the data in the resolu-
       tion requested.  The data fetched is printed to stdout.
       _*_U_N_K_N_O_W_N_* data is often represented by the string "NaN"
       depending on your OSs printf function.

       _f_i_l_e_n_a_m_e
               the name of the RRRRDD you want to fetch the data
               from.

       _C_F      which consolidation function should have been
               applied to the data you want to fetch? (AVER-
               AGE,MIN,MAX,LAST)

       ----rreessoolluuttiioonn|--rr _r_e_s_o_l_u_t_i_o_n (default is the highest resolu-
       tion)
               what interval should the values have (seconds per
               value). rrrrddffeettcchh will try to match your request,
               but it will return data even if no absolute match
               is possible. NNBB.. See note below.

       ----ssttaarrtt|--ss _s_t_a_r_t (default end-1day)
               when should the data begin. A time in seconds
               since epoch (1970-01-01) is required. Negative
               numbers are relative to the current time. By
               default one day worth of data will be fetched. See
               also AT-STYLE TIME SPECIFICATION section for a
               detailed explanation on  ways to specify start
               time.

       ----eenndd|--ee _e_n_d (default now)
               when should the data end. Time in seconds since
               epoch. See also AT-STYLE TIME SPECIFICATION sec-
               tion for a detailed explanation of how to specify
               end time.

       RREESSOOLLUUTTIIOONN IINNTTEERRVVAALL

       In order to get RRDTool to fetch anything other than the
       finest resolution RRA bbootthh the start and end time must be
       specified on boundaries that are multiples of the wanted
       resolution. Consider the following example:

        rrdtool create subdata.rrd -s 10 DS:ds0:GAUGE:300:0:U \
         RRA:AVERAGE:0.5:30:3600 \
         RRA:AVERAGE:0.5:90:1200 \
         RRA:AVERAGE:0.5:360:1200 \
         RRA:MAX:0.5:360:1200 \
         RRA:AVERAGE:0.5:8640:600 \
         RRA:MAX:0.5:8640:600

       This RRD collects data every 10 seconds and stores its
       averages over 5 minutes, 15 minutes, 1 hour and 1 day as
       well as the maxima for 1 hour and 1 day.

       Consider now that you want too fetch the 15 minute average
       data for last hour.  So you might try

        rrdtool fetch subdata.rrd AVERAGE -r 900 -s -1h

       However, this will almost always result in a time series
       that is NNOOTT in the 15 minute RRA. Therefore the highest
       resolution RRA, i.e. 5 minute averages, will be chosen
       which, in this case, is not what you want.

       Hence, make sure that

       1. both start and end time are a multiple of 900

       2. both start and end time are within the wanted RRA

       So, if time now is called "t",

        do end time == int(t/900)*900,
        start time == end time -1hour, resolution == 900.

       In e.g. bash this could look as:

        TIME=$(date +%s); RRDRES=900; rrdtool fetch subdata.rrd AVERAGE -r $RRDRES \
        -e $(echo $(($TIME/$RRDRES*$RRDRES))) -s e-1h

       Or in Perl:

        perl -e '$ctime = time; $rrdres = 900; system "rrdtool fetch subdata.rrd AVERAGE \
        -r $rrdres -e @{[int($ctime/$rrdres)*$rrdres]} -s e-1h"'

       AATT--SSTTYYLLEE TTIIMMEE SSPPEECCIIFFIICCAATTIIOONN

       Apart from the traditional _S_e_c_o_n_d_s _s_i_n_c_e _e_p_o_c_h, RRDTool
       does also understand at-style time specification.  The
       specification is called "at-style" after Unix command
       _a_t(1) that has moderately complex ways to specify time to
       run your job at.  The at-style specification consists of
       two parts: TTIIMMEE RREEFFEERREENNCCEE specification and TTIIMMEE OOFFFFSSEETT
       specification.

       TTIIMMEE RREEFFEERREENNCCEE SSPPEECCIIFFIICCAATTIIOONN

       Time reference specification is used, well,... to estab-
       lish a reference moment in time (for time offset to be
       applied to). When present, it should come first, when
       omitted, it defaults to nnooww. On its own part, time refer-
       ence consists of _t_i_m_e_-_o_f_-_d_a_y reference (which should come
       first, if present) and _d_a_y reference.

       _T_i_m_e_-_o_f_-_d_a_y can be specified as HHHH::MMMM, HHHH..MMMM, or just HHHH,
       you can suffix it with aamm or ppmm or use 24-hours clock. The
       few special times of day are understood as well, these
       include mmiiddnniigghhtt (00:00), nnoooonn (12:00) and British tteeaattiimmee
       (16:00).

       The _d_a_y can be specified as _m_o_n_t_h_-_n_a_m_e _d_a_y_-_o_f_-_t_h_e_-_m_o_n_t_h
       and optional 2- or 4-digit _y_e_a_r number (e.g. March 8
       1999).  Alternatively, you can use _d_a_y_-_o_f_-_w_e_e_k_-_n_a_m_e (e.g.
       Monday), or one of the words: yyeesstteerrddaayy, ttooddaayy, ttoommoorrrrooww.
       You can also specify _d_a_y as a full date in several numeri-
       cal formats; these include: MMMM//DDDD//[[YYYY]]YYYY, DDDD..MMMM..[[YYYY]]YYYY,
       YYYYYYYYMMMMDDDD.

       _N_O_T_E_1: this is different from the original _a_t(1) behavior,
       which interprets a single-number date as MMDD[YY]YY.

       _N_O_T_E_2: if you specify _d_a_y this way, the _t_i_m_e_-_o_f_-_d_a_y is
       REQUIRED to be present.

       Finally, you can use words nnooww, ssttaarrtt, or eenndd as your time
       reference. NNooww refers to the current moment (and is also a
       default time reference). SSttaarrtt (eenndd) can be used to spec-
       ify time relative to the start (end) time for those tools
       that use these categories (rrrrddffeettcchh, rrdgraph).

       Month and weekday names can be used in their naturally
       abbreviated form (e.g., Dec for December, Sun for Sunday,
       etc.). The words nnooww, ssttaarrtt, eenndd can be abbreviated to nn,
       ss, ee.

       TTIIMMEE OOFFFFSSEETT SSPPEECCIIFFIICCAATTIIOONN

       Time offset specification is used to add (or subtract)
       certain time interval to (from) the time reference moment.
       It consists of _s_i_g_n (++ or --) and _a_m_o_u_n_t. The following
       time units can be used to specify the _a_m_o_u_n_t: yyeeaarrss,
       mmoonntthhss, wweeeekkss, ddaayyss, hhoouurrss, mmiinnuutteess, sseeccoonnddss, these can be
       used in singular or plural form, and abbreviated naturally
       or to a single letter (e.g. +3days, -1wk, -3y). Several
       time units can be combined together (e.g., -5mon1w2d), as
       well as several time offsets can be concatenated (e.g.,
       -5h45min = -5h-45min = -6h+15min = -7h+1h30m-15min, etc.)

       _N_O_T_E_3: If you specify time offset in days, weeks, months,
       or years, you will end with the time offset that may vary
       depending on you time reference, because all those time
       units have no single well defined time interval value
       (1 year contains either 365 or 366 days, 1 month is 28 to
       31 days long, and even 1 day may be not equal to 24 hours
       twice a year, when DST-related clock adjustments take
       place).  To cope with this, when you use days, weeks,
       months, or years as your time offset units your time ref-
       erence date is adjusted accordingly without taking too
       much further effort to ensure anything about it (in the
       hope that _m_k_t_i_m_e(3) will take care of this later).  This
       may lead to some surprising (or even invalid!) results,
       e.g. 'May 31 -1month' = 'Apr 31' (meaningless) = 'May 1'
       (after _m_k_t_i_m_e(3) normalization); in the EET timezone
       '3:30am Mar 29 1999 -1 day' yields '3:30am Mar 28 1999'
       (Sunday) which is invalid time/date combination (because
       of 3am -> 4am DST forward clock adjustment, see the below
       example).  On the other hand, hours, minutes, and seconds
       are well defined time intervals, and these are guaranteed
       to always produce time offsets exactly as specified (e.g.
       for EET timezone, '8:00 Mar 27 1999 +2 days' =
       '8:00 Mar 29 1999', but since there is 1-hour DST forward
       clock adjustment takes place around 3:00 Mar 28 1999, the
       actual time interval between 8:00 Mar 27 1999 and
       8:00 Mar 29 1999 equals 47 hours; on the other hand,
       '8:00 Mar 27 1999 +48 hours' = '9:00 Mar 29 1999', as
       expected)

       _N_O_T_E_4: The single-letter abbreviation for both mmoonntthhss and
       mmiinnuutteess is mm. To disambiguate, the parser tries to read
       your mind :) by applying the following two heuristics:

       1  If mm is used in context of (i.e. right after the)
          years, months, weeks, or days it is assumed to mean
          mmoonntthhss, while in the context of hours, minutes, and
          seconds it means minutes.  (e.g., in -1y6m or +3w1m mm
          means mmoonntthhss, while in -3h20m or +5s2m mm means mmiinnuutteess)

       2  Out of context (i.e. right after the ++ or -- sign) the
          meaning of mm is guessed from the number it directly
          follows.  Currently, if the number absolute value is
          below 6 it is assumed that mm means mmoonntthhss, otherwise it
          is treated as mmiinnuutteess.  (e.g., -6m == -6 minutes, while
          +5m == +5 months)

       _F_i_n_a_l _N_O_T_E_S: Time specification is case-insensitive.
       Whitespace can be inserted freely or omitted altogether,
       there are, however, cases when whitespace is required
       (e.g., 'midnight Thu'). In this case you should either
       quote the whole phrase to prevent it from being taken
       apart by your shell or use '_' (underscore) or ',' (comma)
       which also count as whitespace (e.g., midnight_Thu or mid-
       night,Thu)

       TTIIMMEE SSPPEECCIIFFIICCAATTIIOONN EEXXAAMMPPLLEESS

       _O_c_t _1_2 -- October 12 this year

       _-_1_m_o_n_t_h or _-_1_m -- current time of day, only a month before
       (may yield surprises, see the NOTE3 above)

       _n_o_o_n _y_e_s_t_e_r_d_a_y _-_3_h_o_u_r_s -- yesterday morning; can be put
       also as _9_a_m_-_1_d_a_y

       _2_3_:_5_9 _3_1_._1_2_._1_9_9_9 -- 1 minute to the year 2000

       _1_2_/_3_1_/_9_9 _1_1_:_5_9_p_m -- 1 minute to the year 2000 for imperi-
       alists

       _1_2_a_m _0_1_/_0_1_/_0_1 -- start of the new millennium

       _e_n_d_-_3_w_e_e_k_s or _e_-_3_w -- 3 weeks before end time (may be used
       as start time specification)

       _s_t_a_r_t_+_6_h_o_u_r_s or _s_+_6_h -- 6 hours after start time (may be
       used as end time specification)

       _9_3_1_2_2_5_5_3_7 -- 18:45  July 5th, 1999 (yes, seconds since
       1970 are valid as well)

       _1_9_9_7_0_7_0_3 _1_2_:_4_5 -- 12:45  July 3th, 1997 (my favorite, and
       its even got an ISO number (8601))

AAUUTTHHOORR
       Tobias Oetiker <oetiker@ee.ethz.ch>



1.0.50                      2004-10-21                RRDFETCH(1)
