.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH RRDp 3 "19990527.00" "25/May/99" "rrdtool"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
RRDp \- Attach rrdtool from within a perl script via a set of pipes;
.SH "SYNOPSIS"
use \fBRRDp\fR
.PP
\fBRRDp::start\fR \fIpath to rrdtool executable\fR
.PP
\fBRRDp::cmd\fR  \fIrrdtool commandline\fR
.PP
$answer = \fBRRD::read\fR
.PP
$status = \fBRRD::end\fR
.PP
\fB$RRDp::user\fR,  \fB$RRDp::sys\fR, \fB$RRDp::real\fR
.SH "DESCRIPTION"
With this module you can safely communicate with the rrdtool. 
.PP
After every \fBRRDp::cmd\fR you have to issue an \fBRRDp::read\fR command to get
\fBrrdtool\fRs answer to your command. The answer is returned as a pointer,
in order to speed things up. If the last command did not return any
data, \fBRRDp::read\fR will return an undefined variable. 
.PP
If you import the PERFORMANCE variables into your namespace, 
you can access rrdtools internal performance measurements.
.Ip "use \fBRRDp\fR" 8
Load the RRDp::pipe module.
.Ip "\fBRRDp::start\fR \fIpath to rrdtool executable\fR" 8
start rrdtool. The argument must be the path to the rrdtool executable
.Ip "\fBRRDp::cmd\fR \fIrrdtool commandline\fR" 8
pass commands on to rrdtool. check the rrdtool documentation for
more info on the rrdtool commands.
.Ip "$answer = \fBRRDp::read\fR" 8
read rrdtools response to your command. Note that the \f(CW$answer\fR variable will
only contain a pointer to the returned data. The reason for this is, that
rrdtool can potentially return quite excessive amounts of data
and we don't want to copy this around in memory. So when you want to 
access the contents of \f(CW$answer\fR you have to use $$answer which dereferences
the variable.
.Ip "$status = \fBRRDp::end\fR" 8
terminates rrdtool and returns rrdtools status ... 
.Ip "\fB$RRDp::user\fR,  \fB$RRDp::sys\fR, \fB$RRDp::real\fR" 8
these variables will contain totals of the user time, system time and
real time as seen by rrdtool.  User time is the time rrdtool is
running, System time is the time spend in system calls and real time
is the total time rrdtool has been running.
.Sp
The difference between user + system and real is the time spent
waiting for things like the hard disk and new input from the perl
script.
.SH "EXAMPLE"
.PP
.Vb 8
\& use RRDp;
\& RRDp::start "/usr/local/bin/rrdtool";
\& RRDp::cmd   qw(create demo.rrd --step 100 
\&               DS:in:GAUGE:100:U:U
\&               RRA:AVERAGE:0.5:1:10);
\& $answer = RRDp::read;
\& print $$answer;
\& ($usertime,$systemtime,$realtime) =  ($RRDp::user,$RRDp::sys,$RRDp::real);
.Ve
.SH "SEE ALSO"
For more information on how to use rrdtool, check the manpages.
.SH "AUTHOR"
Tobias Oetiker <oetiker@ee.ethz.ch>

.rn }` ''
.IX Title "RRDp 3"
.IX Name "RRDp - Attach rrdtool from within a perl script via a set of pipes;"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Item "use \fBRRDp\fR"

.IX Item "\fBRRDp::start\fR \fIpath to rrdtool executable\fR"

.IX Item "\fBRRDp::cmd\fR \fIrrdtool commandline\fR"

.IX Item "$answer = \fBRRDp::read\fR"

.IX Item "$status = \fBRRDp::end\fR"

.IX Item "\fB$RRDp::user\fR,  \fB$RRDp::sys\fR, \fB$RRDp::real\fR"

.IX Header "EXAMPLE"

.IX Header "SEE ALSO"

.IX Header "AUTHOR"

