# This file is an input file used by the GNU "autoconf" program to
# generate the file "configure", which is run during Orca installation
# to configure the system for the local environment.
AC_INIT(orca/orca.pl.in)
AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_SYSTEM

# Minimum Autoconf version required.
AC_PREREQ(2.53)

# Remember the command line arguments to configure for use when
# configure is run again.  Also create the command line options for
# RRD configure.
ORCA_CONFIGURE_COMMAND_LINE=${1+"$@"}
RRD_CONFIGURE_COMMAND_LINE="$ORCA_CONFIGURE_COMMAND_LINE --cache-file=../../config.cache"
AC_SUBST(ORCA_CONFIGURE_COMMAND_LINE)
AC_SUBST(RRD_CONFIGURE_COMMAND_LINE)

# Set this to yes to have configure always build all of the required
# Perl Orca modules.  This is used to test the build more than
# anything else.
# ALWAYS_BUILD_PERL_MODULES=yes
# ALWAYS_BUILD_PERL_MODULES=

# Define the directories containing packages that Orca makes use of here.
# The directory name packages where these packages are distributed with
# Orca gets added where necessary.
COMPRESS_ZLIB_DIR=Compress-Zlib-1.05
COMPRESS_ZLIB_VER=1.05
DATA_DUMPER_DIR=Data-Dumper-2.101
DATA_DUMPER_VER=2.101
DATE_PARSE_DIR=TimeDate-1.14
DATE_PARSE_VER=2.24
DEVEL_DPROF_DIR=DProf-19990108
DEVEL_DPROF_VER=19990108
DIGEST_MD5_DIR=Digest-MD5-2.22
DIGEST_MD5_VER=2.22
MATH_INTERVALSEARCH_DIR=Math-Interpolate-1.05
MATH_INTERVALSEARCH_VER=1.05
RRDTOOL_DIR=rrdtool-1.0.40
RRDTOOL_VER=1.000401
STORABLE_DIR=Storable-2.06
STORABLE_VER=2.06
TIME_HIRES_DIR=Time-HiRes-1.41
TIME_HIRES_VER=1.41

AC_SUBST(COMPRESS_ZLIB_DIR)
AC_SUBST(DATA_DUMPER_DIR)
AC_SUBST(DATE_PARSE_DIR)
AC_SUBST(DEVEL_DPROF_DIR)
AC_SUBST(DIGEST_MD5_DIR)
AC_SUBST(MATH_INTERVALSEARCH_DIR)
AC_SUBST(RRDTOOL_DIR)
AC_SUBST(STORABLE_DIR)
AC_SUBST(TIME_HIRES_DIR)
AC_SUBST(COMPRESS_ZLIB_VER)
AC_SUBST(DATA_DUMPER_VER)
AC_SUBST(DATE_PARSE_VER)
AC_SUBST(DEVEL_DPROF_VER)
AC_SUBST(DIGEST_MD5_VER)
AC_SUBST(MATH_INTERVALSEARCH_VER)
AC_SUBST(RRDTOOL_VER)
AC_SUBST(STORABLE_VER)
AC_SUBST(TIME_HIRES_VER)

# Get the current working directory and the config directory.
cwd=`pwd`
config_dir="$cwd/config"
if test ! -d $config_dir; then
  AC_MSG_ERROR([*** Cannot find config directory.])
fi

AC_ARG_WITH(var-dir,
  [  --with-var-dir=DIR      where raw measured data is stored [[localstatedir/orca]]],
  [
    case "$withval" in
      "" | y | ye | yes | n | no)
         AC_MSG_ERROR([*** You must supply an argument to the --with-var-dir option.])
         ;;
      *) VAR_DIR="$withval"
         ;;
    esac
  ],
  : ${VAR_DIR=$localstatedir/orca}
)
VAR_DIR=`(
    test "x$prefix" = xNONE && prefix=$ac_default_prefix
    test "x$exec_prefix" = xNONE && exec_prefix=${prefix}
    eval echo "$VAR_DIR"
)`
AC_SUBST(VAR_DIR)

# Define the directories where the source orcallator and RRD data files
# will be installed.
AC_ARG_WITH(rrd-dir,
  [  --with-rrd-dir=DIR      where RRD data files are stored [[var-dir/rrd]]],
  [
    case "$withval" in
      "" | y | ye | yes | n | no)
         AC_MSG_ERROR([*** You must supply an argument to the --with-rrd-dir option.])
         ;;
      *) RRD_DIR="$withval"
         ;;
    esac
  ],
  : ${RRD_DIR=$VAR_DIR/rrd}
)
RRD_DIR=`(
    test "x$prefix" = xNONE && prefix=$ac_default_prefix
    test "x$exec_prefix" = xNONE && exec_prefix=${prefix}
    eval echo "$RRD_DIR"
)`
AC_SUBST(RRD_DIR)

AC_ARG_WITH(html-dir,
  [  --with-html-dir=DIR     where is the output HTML root directory],
  [
    case "$withval" in
      "" | y | ye | yes | n | no)
         AC_MSG_ERROR([*** You must supply an argument to the --with-html-dir option.])
         ;;
      *) HTML_DIR="$withval"
         ;;
    esac
  ],
  AC_MSG_ERROR([*** You must use the --with-html-dir argument and supply a value.])
)
AC_SUBST(HTML_DIR)

WATCH_WEB=
NCSA_LOG=
AC_ARG_WITH(ncsa-log,
  [  --with-ncsa-log=FILE    location of the NCSA style web server access log],
  [
    case "$withval" in
      "" | y | ye | yes | n | no)
         AC_MSG_ERROR([*** You must supply an argument to the --with-ncsa-log option.])
         ;;
      *) WEB_LOG="$withval"
         NCSA_LOG=yes
         WATCH_WEB="-DWATCH_WEB"
         ;;
    esac
  ]
)

PROXY_LOG=
AC_ARG_WITH(proxy-log,
  [  --with-proxy-log=FILE   location of the proxy NCSA web server access log],
  [
    if test "$NCSA_LOG"; then
      AC_MSG_ERROR([*** You cannot use both --with-ncsa-log and --with-proxy-log.])
    fi
    case "$withval" in
      "" | y | ye | yes | n | no)
         AC_MSG_ERROR([*** You must supply an argument to the --with-proxy-log option.])
         ;;
      *) WEB_LOG="$withval"
         PROXY_LOG=yes
         WATCH_WEB="-DWATCH_WEB -DWATCH_PROXY"
         ;;
    esac
  ]
)

AC_ARG_WITH(squid-log,
  [  --with-squid-log=FILE   location of the Squid file log file],
  [
    if test "$NCSA_LOG"; then
      AC_MSG_ERROR([*** You cannot use both --with-ncsa-log and --with-squid-log.])
    fi
    if test "$PROXY_LOG"; then
      AC_MSG_ERROR([*** You cannot use both --with-proxy-log and --with-squid-log.])
    fi
    case "$withval" in
      "" | y | ye | yes | n | no)
         AC_MSG_ERROR([*** You must supply an argument to the --with-squid-log option.])
         ;;
      *) WEB_LOG="$withval"
         WATCH_WEB="-DWATCH_WEB -DWATCH_SQUID"
         ;;
    esac
  ]
)
AC_SUBST(WATCH_WEB)
AC_SUBST(WEB_LOG)

AC_ARG_WITH(warn-email,
  [  --with-warn-email=ADDR  email address to send warnings to [[root@localhost]]],
  [
    case "$withval" in
      "" | y | ye | yes | n | no)
         AC_MSG_ERROR([*** You must supply an argument to the --with-warn-email option.])
         ;;
      *) WARN_EMAIL="$withval"
         ;;
    esac
  ],
  : ${WARN_EMAIL=root@localhost}
)
AC_SUBST(WARN_EMAIL)

# To get a default CFLAGS for this build, check for a C compiler.  This
# is also needed to be ready to compile any Perl modules.
AC_PROG_CC

AC_PROG_MAKE_SET
AC_ARG_PROGRAM
AC_PATH_PROG(BZIP2, bzip2)
AC_PATH_PROG(BUNZIP2, bunzip2)
AC_PATH_PROG(COMPRESS, compress)
AC_PATH_PROG(CUT, cut, cut)
AC_PATH_PROG(EXPR, expr, expr)
AC_PATH_PROGS(TAR,gtar gnutar tar)
AC_PATH_PROG(GZIP, gzip)
AC_PATH_PROG(GUNZIP, gunzip)
AC_PATH_PROGS(AWK, mawk gawk nawk awk)

# Include the file that defines BORP_PERL_RUN.
AC_PATH_PROG(PERL, perl, NOT_FOUND)
if test "x$PERL" = xNOT_FOUND; then
  AC_MSG_ERROR([*** Perl not found.  Please install Perl.  See INSTALL how to do this.])
else
  BORP_PERL_RUN($PERL, PERL_HEAD=PerlHead1, PERL_HEAD=PerlHead2)
fi
PERL_HEAD="$cwd/config/$PERL_HEAD"
AC_SUBST(PERL_HEAD)

AC_PATH_PROG(POD2HTML, pod2html, :)
AC_PATH_PROG(POD2MAN,  pod2man,  :)
AC_PATH_PROG(POD2TEXT, pod2text, :)

# Determine the correct ps command to use to find out about process
# information for itself.
AC_PATH_PROG(PS, ps)
case "$target" in
  *-solaris*)
    PS_SELF="$PS -p PID -o \'rss vsz pmem time user pid comm\'"
    ;;
  *-linux-*)
    PS_SELF="$PS up PID"
    ;;
  *)
    PS_SELF="$PS aux | grep PID"
    AC_MSG_WARN([*** If you know a better PS command than])
    AC_MSG_WARN([***   '$PS_SELF'])
    AC_MSG_WARN([*** to get process information for your host,])
    AC_MSG_WARN([*** please email the command and the output from])
    AC_MSG_WARN([*** ./config/config.guess to])
    AC_MSG_WARN([*** orca-dev@orcaware.com])
    ;;
esac
if test "$PS_SELF"; then
  AC_MSG_CHECKING([for ps command])
  AC_MSG_RESULT($PS_SELF)
  AC_SUBST(PS_SELF)
fi
AC_PATH_PROG(SE, se,,$PATH:/opt/RICHPse/bin)
AC_PATH_PROG(UNAME, uname, uname)
AC_PATH_PROG(UNCOMPRESS, uncompress)

# Determine the correct flags to compress files depending upon the compress
# programs available.
COMPRESSOR=
UNCOMPRESSOR_PIPE=
if test -n "$BZIP2" -a -n "$BUNZIP2"; then
  COMPRESSOR="$BZIP2 -9"
  UNCOMPRESSOR_PIPE="$BUNZIP2 -c"
elif test -n "$GZIP" -a -n "$GUNZIP"; then
  COMPRESSOR="$GZIP -9"
  UNCOMPRESSOR_PIPE="$GUNZIP -c"
elif test -n "$COMPRESS" -a -n "$UNCOMPRESS"; then
  COMPRESSOR="$COMPRESS"
  UNCOMPRESSOR_PIPE="$UNCOMPRESS -c"
fi
AC_SUBST(COMPRESSOR)
AC_SUBST(UNCOMPRESSOR_PIPE)

# Always build the orcallator files regardless of the operating system.
BUILD_ORCALLATOR=yes
ORCALLATOR_SUBDIR=data_gatherers/orcallator
INSTALL_LIB_RRDTOOL=
AC_SUBST(ORCALLATOR_SUBDIR)
AC_SUBST(INSTALL_LIB_RRDTOOL)

# These commands can be used if the orcallator should not be built.
# AC_MSG_CHECKING([for solaris host for orcallator install])
# AC_MSG_RESULT($BUILD_ORCALLATOR)
# BUILD_ORCALLATOR=no
# ORCALLATOR_SUBDIR=

# These commands can be used to force a build of the librrdtool library.
# INSTALL_LIB_RRDTOOL=install_lib_rrdtool
# MAKE_RRDTOOL=make_rrdtool
# TEST_RRDTOOL=test_rrdtool
# INSTALL_PERL_RRDTOOL=
# CLEAN_RRDTOOL=clean_rrdtool
# DISTCLEAN_RRDTOOL=distclean_rrdtool

# This command can be used to add --enable-shared to the configure
# options for RRDtool if it is not already declared.
# expr "$ORCA_CONFIGURE_COMMAND_LINE" : "--enable-shared" >/dev/null 2>&1 || ORCA_CONFIGURE_COMMAND_LINE="$ORCA_CONFIGURE_COMMAND_LINE --enable-shared"

dnl BORP_PERL_MODULE(orca_cv_perl_compress_zlib, $PERL, Compress::Zlib, $COMPRESS_ZLIB_VER)
dnl test "$ALWAYS_BUILD_PERL_MODULES" && orca_cv_perl_compress_zlib=no
dnl if test "$orca_cv_perl_compress_zlib" = no; then
dnl   MAKE_COMPRESS_ZLIB=make_compress_zlib
dnl   TEST_COMPRESS_ZLIB=test_compress_zlib
dnl   INSTALL_PERL_COMPRESS_ZLIB=install_perl_compress_zlib
dnl   CLEAN_COMPRESS_ZLIB=clean_compress_zlib
dnl   DISTCLEAN_COMPRESS_ZLIB=distclean_compress_zlib
dnl fi
AC_SUBST(MAKE_COMPRESS_ZLIB)
AC_SUBST(TEST_COMPRESS_ZLIB)
AC_SUBST(INSTALL_PERL_COMPRESS_ZLIB)
AC_SUBST(CLEAN_COMPRESS_ZLIB)
AC_SUBST(DISTCLEAN_COMPRESS_ZLIB)

BORP_PERL_MODULE(orca_cv_perl_data_dumper, $PERL, Data::Dumper, $DATA_DUMPER_VER)
test "$ALWAYS_BUILD_PERL_MODULES" && orca_cv_perl_data_dumper=no
if test "$orca_cv_perl_data_dumper" = no; then
  MAKE_DATA_DUMPER=make_data_dumper
  TEST_DATA_DUMPER=test_data_dumper
  INSTALL_PERL_DATA_DUMPER=install_perl_data_dumper
  CLEAN_DATA_DUMPER=clean_data_dumper
  DISTCLEAN_DATA_DUMPER=distclean_data_dumper
fi
AC_SUBST(MAKE_DATA_DUMPER)
AC_SUBST(TEST_DATA_DUMPER)
AC_SUBST(INSTALL_PERL_DATA_DUMPER)
AC_SUBST(CLEAN_DATA_DUMPER)
AC_SUBST(DISTCLEAN_DATA_DUMPER)

BORP_PERL_MODULE(orca_cv_perl_date_parse, $PERL, Date::Parse, $DATE_PARSE_VER)
test "$ALWAYS_BUILD_PERL_MODULES" && orca_cv_perl_date_parse=no
if test "$orca_cv_perl_date_parse" = no; then
  MAKE_DATE_PARSE=make_date_parse
  TEST_DATE_PARSE=test_date_parse
  INSTALL_PERL_DATE_PARSE=install_perl_date_parse
  CLEAN_DATE_PARSE=clean_date_parse
  DISTCLEAN_DATE_PARSE=distclean_date_parse
fi
AC_SUBST(MAKE_DATE_PARSE)
AC_SUBST(TEST_DATE_PARSE)
AC_SUBST(INSTALL_PERL_DATE_PARSE)
AC_SUBST(CLEAN_DATE_PARSE)
AC_SUBST(DISTCLEAN_DATE_PARSE)

BORP_PERL_MODULE(orca_cv_perl_devel_dprof, $PERL, Devel::DProf, $DEVEL_DPROF_VER)
test "$ALWAYS_BUILD_PERL_MODULES" && orca_cv_perl_devel_dprof=no
if test "$orca_cv_perl_devel_dprof" = no; then
  MAKE_DEVEL_DPROF=make_devel_dprof
  TEST_DEVEL_DPROF=test_devel_dprof
  INSTALL_PERL_DEVEL_DPROF=install_perl_devel_dprof
  CLEAN_DEVEL_DPROF=clean_devel_dprof
  DISTCLEAN_DEVEL_DPROF=distclean_devel_dprof
fi
AC_SUBST(MAKE_DEVEL_DPROF)
AC_SUBST(TEST_DEVEL_DPROF)
AC_SUBST(INSTALL_PERL_DEVEL_DPROF)
AC_SUBST(CLEAN_DEVEL_DPROF)
AC_SUBST(DISTCLEAN_DEVEL_DPROF)

BORP_PERL_MODULE(orca_cv_perl_digest_md5, $PERL, Digest::MD5, $DIGEST_MD5_VER)
test "$ALWAYS_BUILD_PERL_MODULES" && orca_cv_perl_digest_md5=no
if test "$orca_cv_perl_digest_md5" = no; then
  MAKE_DIGEST_MD5=make_digest_md5
  TEST_DIGEST_MD5=test_digest_md5
  INSTALL_PERL_DIGEST_MD5=install_perl_digest_md5
  CLEAN_DIGEST_MD5=clean_digest_md5
  DISTCLEAN_DIGEST_MD5=distclean_digest_md5
fi
AC_SUBST(MAKE_DIGEST_MD5)
AC_SUBST(TEST_DIGEST_MD5)
AC_SUBST(INSTALL_PERL_DIGEST_MD5)
AC_SUBST(CLEAN_DIGEST_MD5)
AC_SUBST(DISTCLEAN_DIGEST_MD5)

BORP_PERL_MODULE(orca_cv_perl_math_intervalsearch, $PERL, Math::IntervalSearch, $MATH_INTERVALSEARCH_VER)
test "$ALWAYS_BUILD_PERL_MODULES" && orca_cv_perl_math_intervalsearch=no
if test "$orca_cv_perl_math_intervalsearch" = no; then
  MAKE_MATH_INTERVALSEARCH=make_math_intervalsearch
  TEST_MATH_INTERVALSEARCH=test_math_intervalsearch
  INSTALL_PERL_MATH_INTERVALSEARCH=install_perl_math_intervalsearch
  CLEAN_MATH_INTERVALSEARCH=clean_math_intervalsearch
  DISTCLEAN_MATH_INTERVALSEARCH=distclean_math_intervalsearch
fi
AC_SUBST(MAKE_MATH_INTERVALSEARCH)
AC_SUBST(TEST_MATH_INTERVALSEARCH)
AC_SUBST(INSTALL_PERL_MATH_INTERVALSEARCH)
AC_SUBST(CLEAN_MATH_INTERVALSEARCH)
AC_SUBST(DISTCLEAN_MATH_INTERVALSEARCH)

BORP_PERL_MODULE(orca_cv_perl_rrds, $PERL, RRDs, $RRDTOOL_VER)
test "$ALWAYS_BUILD_PERL_MODULES" && orca_cv_perl_rrds=no
if test "$orca_cv_perl_rrds" = no; then
  MAKE_RRDTOOL=make_rrdtool
  TEST_RRDTOOL=test_rrdtool
  INSTALL_PERL_RRDTOOL=install_perl_rrdtool
  CLEAN_RRDTOOL=clean_rrdtool
  DISTCLEAN_RRDTOOL=distclean_rrdtool
fi
AC_SUBST(MAKE_RRDTOOL)
AC_SUBST(TEST_RRDTOOL)
AC_SUBST(INSTALL_PERL_RRDTOOL)
AC_SUBST(CLEAN_RRDTOOL)
AC_SUBST(DISTCLEAN_RRDTOOL)

BORP_PERL_MODULE(orca_cv_perl_storable, $PERL, Storable, $STORABLE_VER)
test "$ALWAYS_BUILD_PERL_MODULES" && orca_cv_perl_storable=no
if test "$orca_cv_perl_storable" = no; then
  MAKE_STORABLE=make_storable
  TEST_STORABLE=test_storable
  INSTALL_PERL_STORABLE=install_perl_storable
  CLEAN_STORABLE=clean_storable
  DISTCLEAN_STORABLE=distclean_storable
fi
AC_SUBST(MAKE_STORABLE)
AC_SUBST(TEST_STORABLE)
AC_SUBST(INSTALL_PERL_STORABLE)
AC_SUBST(CLEAN_STORABLE)
AC_SUBST(DISTCLEAN_STORABLE)

BORP_PERL_MODULE(orca_cv_perl_time_hires, $PERL, Time::HiRes, $TIME_HIRES_VER)
test "$ALWAYS_BUILD_PERL_MODULES" && orca_cv_perl_time_hires=no
if test "$orca_cv_perl_time_hires" = no; then
  MAKE_TIME_HIRES=make_time_hires
  TEST_TIME_HIRES=test_time_hires
  INSTALL_PERL_TIME_HIRES=install_perl_time_hires
  CLEAN_TIME_HIRES=clean_time_hires
  DISTCLEAN_TIME_HIRES=distclean_time_hires
  PERL_USE_TIME_HIRES=
else
  PERL_USE_TIME_HIRES="use Time::HiRes qw(time);"
fi
AC_SUBST(MAKE_TIME_HIRES)
AC_SUBST(TEST_TIME_HIRES)
AC_SUBST(INSTALL_PERL_TIME_HIRES)
AC_SUBST(CLEAN_TIME_HIRES)
AC_SUBST(DISTCLEAN_TIME_HIRES)
AC_SUBST(PERL_USE_TIME_HIRES)

# Build the RRDtool library if it is needed.
if test "$orca_cv_perl_rrds" = no; then
  command="(cd packages/$RRDTOOL_DIR; ./configure $RRD_CONFIGURE_COMMAND_LINE)"
  echo ""
  echo "Running configure in packages/$RRDTOOL_DIR to create RRDtool and RRDs.pm."
  echo ""
  echo $command
  echo ""
  eval $command
fi

# Define the INSTALL and MKDIR variables to point to the scripts in
# the config directory.
INSTALL="$config_dir/install-sh -c"
MKDIR="$config_dir/mkinstalldirs"
AC_SUBST(INSTALL)
AC_SUBST(MKDIR)

# Determine the appropriate init.d directory on the system.
AC_MSG_CHECKING([where the boot init.d directory is])
for dir in /etc/rc.d/init.d /etc/init.d; do
  if test -d "$dir"; then
    INIT_D_DIR="$dir"
    break
  fi
done
if test "$INIT_D_DIR"; then
  AC_MSG_RESULT([$INIT_D_DIR])
else
  AC_MSG_RESULT([none found])
fi
AC_SUBST(INIT_D_DIR)

# Determine the directory that contains the rcX.d directories.
AC_MSG_CHECKING([which directory contains the boot rcX.d directories])
for dir in /etc/rc.d/rc3.d /etc/rc3.d; do
  if test -d "$dir"; then
    RCX_D_CONTAINING_DIR="`dirname $dir`"
    break
  fi
done
if test "$RCX_D_CONTAINING_DIR"; then
  AC_MSG_RESULT([$RCX_D_CONTAINING_DIR])
else
  AC_MSG_RESULT([none found])
fi
AC_SUBST(RCX_D_CONTAINING_DIR)

#--------------------------------------------------------------------
#       Generate the Makefiles and shell scripts with the
#       variable substitutions.
#--------------------------------------------------------------------
if test "$BUILD_ORCALLATOR" = yes; then
  ORCALLATOR_OUTPUT="data_gatherers/orcallator/Makefile
                     data_gatherers/orcallator/orcallator.cfg
                     data_gatherers/orcallator/orcallator_running.pl
                     data_gatherers/orcallator/restart_orcallator.sh
                     data_gatherers/orcallator/start_orcallator.sh
                     data_gatherers/orcallator/stop_orcallator.sh
                     data_gatherers/orcallator/S99orcallator.sh"
fi

AC_OUTPUT(Makefile
          config/PerlHead1
          config/PerlHead2
          contrib/Makefile
          contrib/rotate_orca_graphs/Makefile
          contrib/rotate_orca_graphs/rotate_orca_graphs.sh
          data_gatherers/Makefile
          $ORCALLATOR_OUTPUT
          data_gatherers/orca_services/Makefile
          data_gatherers/orca_services/orca_services.cfg
          data_gatherers/orca_services/orca_services.pl
          data_gatherers/orca_services/orca_services_running.pl
          data_gatherers/orca_services/restart_orca_services.sh
          data_gatherers/orca_services/start_orca_services.sh
          data_gatherers/orca_services/stop_orca_services.sh
          data_gatherers/orca_services/S99orca_services.sh
          docs/Makefile
          lib/Makefile
          packages/Makefile
          orca/Makefile
          orca/orca.pl
         )

echo
echo "----------------------------------------------------------------"
echo "You have now successfully configured Orca."
echo
echo "Type 'make' to compile the software and use 'make install' to "
echo "install everything to: $prefix."
echo
echo "If you find Orca useful, make my wife and me happy.  Go to"
echo "http://www.orcaware.com/wish_list.html and pick an item from our"
echo "Amazon.com wish list."
echo
echo "Blair Zajac <blair@orcaware.com>"
echo "----------------------------------------------------------------"

echo $ECHO_N "ordering CD from http://www.orcaware.com/wish_list.html $ECHO_C" 1>&6
sleep 1
echo $ECHO_N ".$ECHO_C" 1>&6
sleep 1
echo $ECHO_N ".$ECHO_C" 1>&6
sleep 1
echo $ECHO_N ".$ECHO_C" 1>&6
sleep 1
echo $ECHO_N ".$ECHO_C" 1>&6
sleep 1
AC_MSG_RESULT([ just kidding ;-)])

case "$target" in
  *-solaris*)
    if test -z "$WEB_LOG"; then
      AC_MSG_WARN([*** Unless you use a --with-*-log option orcallator will not gather WWW log data.])
    fi
    ;;
  *)
    ;;
esac
